{
	// Place your ndcoslo2021_pulumi workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Read pulumi config": {
		"prefix": "pd1",
		"scope": "typescript",
		"body": [
			"const config = new pulumi.Config();",
			"const message = config.get('message');",
			"export { message };"
		]
	},
	"Create first rg": {
		"prefix": "pd2",
		"scope": "typescript",
		"body": [
			"import { ResourceGroup } from '@pulumi/azure-native/resources';",
			"const resourceGroup = new azure.ResourceGroup('ndc-rg', {});"
		]
	},
	"Create RG function": {
		"prefix": "pd3",
		"scope": "typescript",
		"body": [
			"import { ResourceGroup } from '@pulumi/azure-native/resources';",
				"import * as pulumi from '@pulumi/pulumi';",
				"import { Config } from '@pulumi/pulumi';",
				"import { InlineProgramArgs, LocalWorkspace } from '@pulumi/pulumi/automation';",
				"",
				"const createRg = (name: string) => {",
				"    return new ResourceGroup(name, {",
				"        location: 'westeurope',",
				"        tags: {",
				"            'automated': 'true'",
				"        }",
				"    });",
				"}",
		]
	},
	"Create up function": {
		"prefix": "pd4", 
		"scope": "typescript",
		"body": [
			"export const run = async (projectName: string, rgName: string) => {",
			"    const program = async () => {",
			"        const rg = createRg(rgName);",
			"        return {",
			"            rgName: rg.name",
			"        };",
			"    };",
			"",
			"    const args: InlineProgramArgs = {",
			"        stackName: projectName,",
			"        projectName: 'automatedRg',",
			"        program: program",
			"    }",
			"    const stack = await LocalWorkspace.createOrSelectStack(args);",
			"    const upRes = await stack.up({onOutput: console.info});",
			"    console.log('==> Rg name: ' + upRes.outputs.rgName.value);",
			"    return upRes.outputs.rgName.value;",
			"};",
		]
	},
	"Create console app": {
		"prefix": "pd5",
		"scope": "typescript",
		"body": [
		"import { run } from './program';",
		"",
		"const args = process.argv.slice(2);",
		"const projectName = args[0]",
		"const rgName = args[1]",
		"run(projectName, rgName).catch(err => console.log(err));",
		]
	},
	"Add scripts to package.json": {
		"prefix": "pd6",
		"scope": "json",
		"body": [
		"    \"scripts\": {",
		"        \"start\": \"tsc && node ./bin/index.js\"",
		"    }",
		]
	},
	"Create post endpoint": {
		"prefix": "pd7",
		"scope": "typescript",
		"body": [
			"import * as express from 'express';",
			"",
			"const app = express();",
			"const port = 3000;",
			"app.use(express.json());",
			"",
			"type CreateRequest = {",
			"    projectName: string,",
			"    rgName: string",
			"}",
			"app.post('/rg', async (req, res) => {",
			"    const payload = req.body as CreateRequest;",
			"    console.log('==> request: ', payload);",
			"    const result = await run(payload.projectName, payload.rgName);",
			"    res.send('Done: ' + JSON.stringify(result));",
			"});",
		]

	}
}